interface Search {
  id: ID
  location: Location
  price: Float
  datetime: String
}

# All available locations
enum Location {
  # Munich
  MUC
  # Berlin
  BER
  # Frankfurt
  FRA
}

# All available payments
enum Payment {
  VISA
  PAYPAL
}

# Represents a flight to book
type Flight implements Search {
  id: ID
  price: Float
  # flight to
  location: Location
  # flight from
  from: Location
  # Next flight
  connection: Flight
  datetime: String
  class: String
  details: JSON
}

# Represents a hotel to book
type Hotel implements Search {
  id: ID
  location: Location
  price: Float
  datetime: String
  class: String
}

# Represents a flight to book
type Car implements Search {
  id: ID
  price: Float
  location: Location
  datetime: String
  category: String
}

type Trip {
  id: ID
  flight: Flight
  hotel: Hotel
  car: Car
  domainError: JSON
}

type Reservation {
  id: ID
  trip: Trip
  payment: String
  domainError: JSON
}

type Query {
  locations: [Location]
  payments: [Payment]
  # Search something
  search(location: String): [Search]
  # Load a flight by ID
  flight(id: ID!): Flight
  # Load all flights
  flights: [Flight]
  flight(id: ID!): Flight
  hotel(id: ID!): Hotel
  hotels: [Hotel]
  car(id: ID!): Car
  cars: [Car]
  trip(id: ID): Trip
}

input TripInput {
  id: ID!
  flight: ID
  hotel: ID
  car: ID
}

input PaymentInput {
  source: Payment!
}

type Mutation {
  createTrip: Trip
  updateTrip(input: TripInput!): Trip
  cancelTrip(id: ID!): Trip
  bookTrip(id: ID!, payment: PaymentInput!): Reservation
}

type Subscription {
  # Subscript to booking completed events
  onBookingCompleted: Reservation
}
